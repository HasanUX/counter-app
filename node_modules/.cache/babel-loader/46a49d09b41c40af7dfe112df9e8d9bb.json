{"ast":null,"code":"import _classCallCheck from\"/Users/hasansharif/Desktop/Projects/react/counter-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/hasansharif/Desktop/Projects/react/counter-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/hasansharif/Desktop/Projects/react/counter-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/hasansharif/Desktop/Projects/react/counter-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/* eslint-disable no-unused-vars */import React from'react';//controlled comp: doesn't have own local state, it receives data via props and raises\n//events when data needs to be changed.\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var Card=/*#__PURE__*/function(_React$Component){_inherits(Card,_React$Component);var _super=_createSuper(Card);function Card(){var _this;_classCallCheck(this,Card);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.styles={width:\"18rem\"};return _this;}_createClass(Card,[{key:\"render\",value://eventHandler for the increment btn\n//binding a func using arrow func so that we don't need to create constructor\n//setState is a built-in method to notify react that state prop value is gonna be changed\n//react will then schedule a async call to the render(), i,e this is going to be happened in the future\n//     incrementHandler = () => {\n//         this.setState({ cartValue: this.state.cartValue + 1 });\n//    };\nfunction render(){var _this2=this;return/*#__PURE__*/ (//react element starts\n//we can add <React.Fragment> instead of <div></div> if we don't want this blank div\n_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"card mb-2\",style:this.styles,children:/*#__PURE__*/_jsxs(\"div\",{className:\"card-body\",children:[/*#__PURE__*/_jsx(\"h5\",{className:\"card-title mb-4\",children:this.props.card.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"btn btn-sm btn-primary mr-2\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-table mr-2\"}),\" Add to table\"]}),/*#__PURE__*/_jsxs(\"button\",{onClick:function onClick(){return _this2.props.onDelete(_this2.props.card.id);},className:\"btn btn-sm btn-danger\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-backward\"}),\" Pass it\"]})]})]})})}));}},{key:\"formatCount\",value:function formatCount(){var cartValue=this.state.cartValue;//destructuring happens\nvar emptySpan=/*#__PURE__*/_jsx(\"span\",{className:\"badge badge-light\",children:\"Empty\"});return cartValue===0?emptySpan:cartValue;}}]);return Card;}(React.Component);export default Card;","map":{"version":3,"sources":["/Users/hasansharif/Desktop/Projects/react/counter-app/src/components/cards.js"],"names":["React","Card","styles","width","props","card","name","onDelete","id","cartValue","state","emptySpan","Component"],"mappings":"ghBAAA,mCACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA;AACA;wFACA,UAAaC,CAAAA,IAAb,+TAMIC,MANJ,CAMa,CACNC,KAAK,CAAE,OADD,CANb,sDAUI;AACA;AACA;AACA;AACJ;AACA;AACA;AAEI,iBAAQ,iBAEJ,oBAEI;AACA;AAEA,KAAC,KAAD,CAAO,QAAP,wBAEI,YAAK,SAAS,CAAC,WAAf,CAA2B,KAAK,CAAE,KAAKD,MAAvC,uBAEI,aAAK,SAAS,CAAC,WAAf,wBACI,WAAI,SAAS,CAAC,iBAAd,UAAiC,KAAKE,KAAL,CAAWC,IAAX,CAAgBC,IAAjD,EADJ,cAGI,aAAK,SAAS,CAAC,QAAf,wBACI,gBAAS,SAAS,CAAC,6BAAnB,wBACA,UAAG,SAAS,CAAC,kBAAb,EADA,mBADJ,cAKI,gBAAQ,OAAO,CAAI,yBAAM,CAAA,MAAI,CAACF,KAAL,CAAWG,QAAX,CAAoB,MAAI,CAACH,KAAL,CAAWC,IAAX,CAAgBG,EAApC,CAAN,EAAnB,CAAmE,SAAS,CAAC,uBAA7E,wBACA,UAAG,SAAS,CAAC,gBAAb,EADA,cALJ,GAHJ,GAFJ,EAFJ,EALJ,EAyBH,CA7CL,2BAkDI,sBAAa,CACT,GAAOC,CAAAA,SAAP,CAAoB,KAAKC,KAAzB,CAAOD,SAAP,CAAgC;AAChC,GAAME,CAAAA,SAAS,cAAG,aAAM,SAAS,CAAC,mBAAhB,mBAAlB,CACA,MAAOF,CAAAA,SAAS,GAAK,CAAd,CAAkBE,SAAlB,CAA8BF,SAArC,CACH,CAtDL,kBAA0BT,KAAK,CAACY,SAAhC,EA4DA,cAAeX,CAAAA,IAAf","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react';\n\n//controlled comp: doesn't have own local state, it receives data via props and raises\n//events when data needs to be changed.\nexport class Card extends React.Component {\n    // state = {\n    //     cartValue: this.props.card.value, //declared props that was inserted in counters.js\n    //     itemName: this.props.card.name\n    // };\n\n    styles = {\n       width: \"18rem\"\n    };\n\n    //eventHandler for the increment btn\n    //binding a func using arrow func so that we don't need to create constructor\n    //setState is a built-in method to notify react that state prop value is gonna be changed\n    //react will then schedule a async call to the render(), i,e this is going to be happened in the future\n//     incrementHandler = () => {\n//         this.setState({ cartValue: this.state.cartValue + 1 });\n//    };\n\n    render(){ \n\n        return (\n\n            //react element starts\n            //we can add <React.Fragment> instead of <div></div> if we don't want this blank div\n            \n            <React.Fragment>\n                \n                <div className=\"card mb-2\" style={this.styles} >\n                    \n                    <div className=\"card-body\">\n                        <h5 className=\"card-title mb-4\">{this.props.card.name}</h5>\n\n                        <div className=\"d-flex\">\n                            <button  className=\"btn btn-sm btn-primary mr-2\">\n                            <i className=\"fa fa-table mr-2\"></i> Add to table\n                            </button>\n\n                            <button onClick = {() => this.props.onDelete(this.props.card.id)}  className=\"btn btn-sm btn-danger\">\n                            <i className=\"fa fa-backward\"></i> Pass it\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        ); \n    }\n\n  \n  \n\n    formatCount(){\n        const {cartValue} = this.state; //destructuring happens\n        const emptySpan = <span className=\"badge badge-light\">Empty</span>;\n        return cartValue === 0 ? emptySpan : cartValue;\n    }    \n    \n\n}\n\n    \nexport default Card;\n\n"]},"metadata":{},"sourceType":"module"}