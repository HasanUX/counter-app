{"version":3,"sources":["components/cards.js","components/counter.js","data/fakeCategoryList.js","data/fakeFishList.js","components/header.js","components/reviews.js","components/table.js","components/counters.js","components/navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Card","styles","width","Fragment","className","style","this","props","card","name","onClick","onDelete","id","cartValue","state","React","Component","Counter","counter","onIncrement","capacity","categories","fishID","fishes","title","category","quantity","price","netWeight","getFishes","getWeight","Object","values","reduce","w","Header","mainTitle","subTitle","imageUrl","borderRadius","marginRight","categoryMap","header","map","elem","Reviews","reviews","length","reviewMap","reviewElem","Tables","deleteItem","fish","filter","f","setState","tables","totalWeight","Counters","prevProps","prevState","headers","cards","onReset","getCategories","table","Navbar","count","href","App","c","value","incrementHandler","index","indexOf","deleteHandler","cardID","resetHandler","getCounterLength","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.53d38505.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react';\n\n//controlled comp: doesn't have own local state, it receives data via props and raises\n//events when data needs to be changed.\nexport class Card extends React.Component {\n    // state = {\n    //     cartValue: this.props.card.value, //declared props that was inserted in counters.js\n    //     itemName: this.props.card.name\n    // };\n\n    styles = {\n       width: \"18rem\"\n    };\n\n    //eventHandler for the increment btn\n    //binding a func using arrow func so that we don't need to create constructor\n    //setState is a built-in method to notify react that state prop value is gonna be changed\n    //react will then schedule a async call to the render(), i,e this is going to be happened in the future\n//     incrementHandler = () => {\n//         this.setState({ cartValue: this.state.cartValue + 1 });\n//    };\n\n    render(){ \n\n        return (\n\n            //react element starts\n            //we can add <React.Fragment> instead of <div></div> if we don't want this blank div\n            \n            <React.Fragment>\n                \n                <div className=\"card mb-2\" style={this.styles} >\n                    \n                    <div className=\"card-body\">\n                        <h5 className=\"card-title mb-4\">{this.props.card.name}</h5>\n\n                        <div className=\"d-flex\">\n                            <button  className=\"btn btn-sm btn-primary mr-2\">\n                            <i className=\"fa fa-table mr-2\"></i> Add to table\n                            </button>\n\n                            <button onClick = {() => this.props.onDelete(this.props.card.id)}  className=\"btn btn-sm btn-danger\">\n                            <i className=\"fa fa-backward\"></i> Pass it\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        ); \n    }\n\n  \n  \n\n    formatCount(){\n        const {cartValue} = this.state; //destructuring happens\n        const emptySpan = <span className=\"badge badge-light\">Empty</span>;\n        return cartValue === 0 ? emptySpan : cartValue;\n    }    \n    \n\n}\n\n    \nexport default Card;\n\n","import React from 'react';\n\n//stateless functional components\n//destructuring arguments in stateless func comp\n\nconst Counter = ({counter, onIncrement })  => {\n\n    return (\n        <div className=\"budget-select mb-2\">                 \n            <button className=\"btn btn-sm btn-primary ml-2\" \n                onClick={() => onIncrement(counter)}>\n                <i className=\"fa fa-plus\"></i> Set capacity\n            </button> \n\n            <span className=\"badge badge-dark ml-2\"> {counter.capacity} </span> \n        </div>\n    );\n}\n \nexport default Counter;\n \n","export const categories = [\n    { fishID: \"5b21ca3eeb7f6fbccd471820\", name: \"Sea\" },\n    { fishID: \"5b21ca3eeb7f6fbccd471821\", name: \"Deshi\" },\n    { fishID: \"5b21ca3eeb7f6fbccd471822\", name: \"Shutki\" },\n    { fishID: \"5b21ca3eeb7f6fbccd471823\", name: \"Fishlet\" }\n];\n\nexport function getCategories() {\n    return categories.filter(c => c);\n}","/* eslint-disable no-unused-vars */\nimport * as categoriesAPI from \"./fakeCategoryList\";\n\n\nconst fishes = [\n    {\n        fishID: \"5b21ca3eeb7f6fbccd471809\",\n        title: \"Coral\",\n        category:  { fishID: \"5b21ca3eeb7f6fbccd471820\", name: \"Sea\" },\n        quantity: 0,\n        price: 500,\n        netWeight: 4\n    },\n\n    {\n        fishID: \"5b21ca3eeb7f6fbccd471810\",\n        title: \"Rupchada\",\n        category:  { fishID: \"5b21ca3eeb7f6fbccd471822\", name: \"Deshi\" },\n        quantity: 0,\n        price: 1000,\n        netWeight: 3\n    },\n\n    {\n        fishID: \"5b21ca3eeb7f6fbccd471811\",\n        title: \"Suri\",\n        category:  { fishID: \"5b21ca3eeb7f6fbccd471823\", name: \"Shutki\" },\n        quantity: 0,\n        price: 1000,\n        netWeight: 3\n    }\n];\n\n\n\nexport function getFishes(){\n    return fishes;\n}\n\n\n//sum of total weight\nexport const getWeight = Object.values(fishes).reduce((w, { netWeight }) => w + netWeight, 0);\n\n\n\nexport function getPrice(){\n    let price = fishes.map(p => p.price);\n    return price;\n}\n\n\n// //lets sum the grand total price\n// export function getGrandTotal(){\n//     let price = fishes.map(st => st.price);\n//     const totalPrice =  price.reduce((previousValue, currentValue) => {\n//         return previousValue+currentValue; \n//     }, 0);\n//     return totalPrice;\n// }\n\nexport function getFish(id){\n    return fishes.find(f => f.fishID === id);\n}\n\nexport function saveFish(fish){\n    let fishInDb = fishes.find(f => f.fishID === fish.fishID) || {};\n    fishInDb.name = fish.name;\n    fishInDb.category = categoriesAPI.categories.find(f => f.fishID === fish.categoryId);\n    fishInDb.quantity = fish.quantity;\n    fishInDb.price = fish.price;\n\n    if (!fishInDb.fishID){\n        fishInDb.fishID = Date.now();\n        fishes.push(fishInDb);\n    }\n\n    return fishInDb;\n}\n\nexport function deleteFish(id){\n    let fishInDb = fishes.find(f => f.fishID === id);\n    fishes.splice(fishes.indexOf(fishInDb), 1);\n    return fishInDb;\n}","/* eslint-disable no-unused-vars */\n\nimport React from 'react';\nimport { getFishes } from \"../data/fakeFishList\";\n\nclass Header extends React.Component {\n\n    state = {\n        mainTitle: \"Machbazaar.com\",\n        subTitle: \"Online fish selling platform.\",\n        imageUrl: \"https:/picsum.photos/90\",\n        fishes: getFishes() //declared props that was inserted in counters.js\n    };\n\n    styles = {\n        borderRadius: \"50%\",\n        marginRight: \"15px\"\n    };\n\n     \n    \n    render(){ \n        \n        return (\n            //react element starts\n            //we can add <React.Fragment> instead of <div></div> if we don't want this blank div\n            \n            <div className=\"container\">\n                <div className=\"row\">\n                 \n                    {/* <div className=\"col-md-3 col-12 mt-5\">\n                        <button type=\"button\" href=\"#\" className=\"btn btn-warning\">\n                            <i className=\"fa fa-shopping-cart\"></i>&nbsp;&nbsp; \n                            <span className=\"badge badge-light\"> {this.props.header.value}</span>\n                        </button>  \n                    </div> */}\n                    \n                    <div className=\"col-12 mt-5 d-flex justify-content-start align-items-center\">\n                        <h3 className=\"mr-4\">Types</h3>\n\n                        {this.categoryMap()}\n\n                    </div>\n\n                </div>\n            </div>\n            );\n\n}\n    \n        //map() - categories\n        categoryMap(){\n            return <div>{this.props.header.category.map(elem => <button className=\"btn btn-light border shadow mb-2 mr-4\">{elem.name} </button>)} </div>     \n        }\n    \n\n        btnDanger(){\n            return this.state.cartValue===0 ? 'btn btn-lg btn-danger shadow text-white' \n            : 'btn btn-lg btn-success shadow text-white';\n        }\n\n        formatCount(){\n            const {cartValue} = this.props.counter; //destructuring happens\n            const emptySpan = <span className=\"badge badge-light\">Empty</span>;\n            return cartValue === 0 ? emptySpan : cartValue;\n        }    \n    }\n\n\n\n    \nexport default Header;\n\n// between div tag, is a jsx expression which gets compiled to React.createElement()\n// between {}, we can add js expression, func that produces,returns value\n                   \n","/* eslint-disable no-unused-vars */\nimport React from 'react';\n\nclass Reviews extends React.Component {\n    state = {\n       \n        reviews: ['Good one', 'Bad one', 'Satisfied', 'Loved it']\n        \n    };\n\n    styles = {\n        borderRadius: \"50%\",\n        marginRight: \"15px\"\n    };\n\n    render(){ \n        return (\n          \n            <React.Fragment>\n                <h4>Reviews{this.state.reviews.length !== 0 && <span> ({this.state.reviews.length})</span>}</h4>\n                {/* truthy,falsy applied using && after condition which can be used to conditional render  */}\n                {this.state.reviews.length === 0 && <p>There are no reviews.</p>}\n                {this.reviewMap()}\n            </React.Fragment>\n        ); \n    }\n\n  \n\n    //conditional rendering for review list \n    //another conditional rendering is shown where the func is called using truthy,falsy\n    //key={} is required to assign unique key value to each list for backend integration\n    //another way of map() is showed\n    reviewMap(){\n        if (this.state.reviews.length === 0) return <p>Please add reviews.</p>;\n        return <ul>{this.state.reviews.map(reviewElem => <li key={reviewElem}>{reviewElem}</li>)} </ul>;\n    }    \n \n}\n\n\n    \nexport default Reviews;\n\n// between div tag, is a jsx expression which gets compiled to React.createElement()\n// between {}, we can add js expression, func that produces,returns value\n                   \n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport { getFishes } from \"../data/fakeFishList\";\n\n\n\nclass Tables extends React.Component {\n    state = {\n        fishes: getFishes()\n    };\n\n    styles = {\n        borderRadius: \"50%\",\n        marginRight: \"15px\"\n    };\n\n\n\n    deleteItem = fish => {\n        // if(this.fish === undefined) {return} //catcher to handle error\n        \n        const fishes = this.state.fishes.filter(f => f.fishID !== fish.fishID);\n        this.setState({ fishes });\n\n        // if (this.setState({cartCount: this.state.cartCount - 1})) return 0;\n        \n    };\n\n    render(){ \n\n        // const {length: count} = this.state.fishes;\n   \n        return (\n            //react element starts\n            //we can add <React.Fragment> instead of <div></div> if we don't want this blank div\n            \n            <div className=\"container\">\n                <div className=\"row\">\n                   \n                    {/* Products list */}\n                    <div className=\"col-md-12 col-12\" >\n{/*                        \n                       <div className=\"counter-header\">\n                            <h4 className=\"text-left\">Your cart has {count} item(s)</h4>\n                            \n                            <div type=\"button\" href=\"#\" className=\"badge badge-warning p-2 mb-2 float-right\">\n                                <i className=\"fa fa-shopping-cart\"></i>&nbsp;&nbsp; \n                                <span className=\"badge badge-light\"> {this.state.totalWeight}</span>\n                            </div>  \n                        </div> */}\n                        \n                        <table className=\"table table-striped border\" >\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Category</th>\n                                    <th>Weight(kg)</th>\n                                    <th>Unit Price</th>\n                                    <th>Sub</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {this.state.fishes.map(fish => ( \n                                <tr key={fish.fishID}>\n                                    <td>{fish.title}</td>\n                                    <td>{fish.category.name}</td>\n                                    <td>{fish.netWeight}</td>\n                                    <td>{fish.price}</td>\n                                    <td>{fish.netWeight * fish.price}</td>\n                                    {/* <td>{<button onClick={() => this.incrementHandler(fish)} className=\"btn btn-sm btn-warning\">+</button>}</td> */}\n                                    <td>{<button onClick={() => this.deleteItem(fish)} className=\"btn btn-sm btn-danger\"> <i className=\"fa fa-trash\"></i></button>}</td>\n                                </tr>\n                                ))}\n\n                                <tr>\n                                    <td></td>\n                                    <td>Total weight:</td>\n                                    <td>{this.props.tables.totalWeight}</td>\n                                    <td>Grand Total:</td>\n                                    <td></td>\n                                    <td></td>\n                                  \n                                </tr>\n                               \n                            </tbody>\n                        </table>\n                        \n                    </div>\n\n\n                </div>\n            </div>\n        ); \n    }\n\n    counteWeight(){\n        const {netWeight} = this.state; //destructuring happens\n        const emptySpan = \"0\";\n        return netWeight === 0 ? emptySpan : netWeight;\n    }\n\n\n     \n    //lets get the sub total price\n    // getSubTotal(){\n    //     let price = this.fish.netWeight * this.fish.price;\n    //     const totalPrice =  this.price.reduce((previousValue, currentValue) => {\n    //         return previousValue+currentValue; \n    //     }, 0);\n    //     return totalPrice;\n    // }\n\n\n    //lets get the grand total\n\n    // export const getGrandTotal = Object.values(fishes).reduce((w, { netWeight }) => w , 0);\n    \n    //map() - categories\n    categoryMap(){\n        return <div>{this.state.categories.map(elem => <button className=\"btn btn-light border shadow mb-2 mr-4\"> {elem.name} </button>)}</div>     \n    }\n    \n    //map() - tags\n    // tagMap(){\n    \n    //     const incrementBtn = \n    //     <div className=\"text-right\"> \n    //         <button onClick={() => this.incrementHandler(this.product)} className=\"btn btn-sm btn-warning mr-2\">+</button> \n    //         <button className=\"btn btn-sm btn-danger\"> <i className=\"fa fa-trash\"></i></button> \n    //     </div>;\n\n    //     const tagMapper = this.state.fishes.map(fish => \n    //         <li key={fish} className=\"card p-3 mb-2\"> {fish} {incrementBtn}</li>);\n    //         return tagMapper;\n    // }\n\n   \n}\n\n\n    \nexport default Tables;\n\n// between div tag, is a jsx expression which gets compiled to React.createElement()\n// between {}, we can add js expression, func that produces,returns value\n                   \n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport Card from './cards';\nimport Counter from './counter';\nimport Header from './header';\nimport Reviews from './reviews';\nimport Tables from './table';\n\nclass Counters extends React.Component {\n    \n    //with this method, we can decide whether or not we should make a ajax call.\n    //if (prevProps.counter.value !== this.props.counter.value){\n    //Ajax call and get new data from the server}\n    componentDidUpdate(prevProps, prevState){\n        \n    }\n\n    //with this method, we can clean dom whenever a listener work is done\n    //otherwise there will be memoryleaks\n    componentWillUnmount(){\n\n    }\n\n    render() {\n\n        // simplifying references using obj destructuring\n        const {headers, counter, cards, tables, onIncrement, onDelete, onReset} = this.props;\n\n        return (\n            \n        <div className=\"container mt-4\"> \n\n                <div className=\"header-type-div mb-4\">\n                    {headers.map(header => \n                    <Header key={header.id} \n                    header={header} //will receive all state values\n                    category = {this.getCategories}/>)}                \n                </div>  \n\n                <div className=\"d-flex justify-content-start\">\n                   \n                        <div className=\"counters-div mr-5\">\n                            {counter.map(counter => \n                            <Counter key={counter.id}\n                            counter={counter}\n                            onIncrement={this.props.onIncrement}\n                            onDelete={this.props.onDelete}\n                            onReset={this.props.onReset}\n                            /> )}\n                         \n                        \n                            <div className=\"reset-div\">\n                                <button className=\"btn btn-sm btn-dark\" \n                                    onClick= {this.props.onReset}> \n                                    <i className=\"fa fa-undo\"></i> Reset capacity\n                                </button>\n                            </div>\n                        </div>      \n\n                        <div className=\"card-div\">\n                           \n                            {this.props.cards.map(card => \n                            <Card key={card.id} \n                            card={card}\n                            onDelete={this.props.onDelete}/>) //prop inserted, declated in cards.js\n                            }\n                        </div>\n\n                        <div className=\"table-div\">\n                            {this.props.tables.map(table => \n                            <Tables key={table.id} \n                            tables={table}\n                            onDelete={this.props.onDelete}/>)}\n                        </div> \n                </div>                \n\n                <div className=\"review-div\">\n                    <Reviews />\n                </div>\n\n                \n\n        </div>     \n        );\n    }\n}\n \nexport default Counters;","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react';\n\n//destructuring arguments in stateless func comp\nconst Navbar = ({count})  => {\n    return (\n        <nav className=\"navbar navbar-light bg-light mb-4\">\n            <a href=\"#\" className=\"navbar-brand\">Machbazaar CMS\n            </a>\n\n            <p>Counter-app</p>\n\n            <p className=\"nav-link font-weight-bold\">Your inventory has {count} capacity counter(s)</p>\n        </nav>\n    );\n}\n \nexport default Navbar;\n \n","/* eslint-disable no-useless-constructor */\n/* eslint-disable no-unused-vars */\nimport React, { Component } from 'react';\nimport Counters from './components/counters';\nimport Navbar from './components/navbar';\nimport { getCategories } from \"./data/fakeCategoryList\";\nimport { getFishes, getWeight } from \"./data/fakeFishList\";\n\nexport class App extends Component{\n  \n  state = {\n    headers: [\n        {\n            id:1, \n            category: getCategories(), \n            value: 9\n        }\n    ],\n\n    counter: [\n        {\n          id:1,\n          capacity: 5\n        },\n\n        {\n          id:2,\n          capacity: 10\n        },\n\n        {\n          id:3,\n          capacity: 20\n        }\n    ],\n\n    tables: [\n        {\n            id: 1, \n            value: 5,\n            totalWeight: getWeight,\n            count: getFishes()\n        }\n    ],\n\n    cards: [\n        {id: 1, name: \"Ilish 2kg\"},\n        {id: 2, name: \"Shutki 5kg\"}\n    ]\n};\n\nconstructor(){\n  super();\n  \n}\n\n//life-cycle hooks can be used in only class comp\n//this is the right method to make ajax call to get data\ncomponentDidMount(){\n  \n}\n\n\n\n// increment/increase qty method \nincrementHandler = c => {\n    const counter = [...this.state.counter];\n    const index = counter.indexOf(c);\n    counter[index] = { ...c };\n    counter[index].capacity++;\n    this.setState({ counter });\n};\n\n// delete/increment item method \ndeleteHandler = (cardID) => {\n    // if(this.fish === undefined) {return} //catcher to handle error\n    const cards = this.state.cards.filter(c => c.id !== cardID);\n    this.setState({ cards });\n    // if (this.setState({cartCount: this.state.cartCount - 1})) return 0;\n};\n\n// undo/reset method \nresetHandler = () => {\n    const counter = this.state.counter.map(c => {\n        c.capacity = 0;\n        return c;\n    });\n   \n    this.setState({ counter });\n}\n\n//get counter length\ngetCounterLength = () => {\n  const {length: count} = this.state.counter;\n  return count;\n}\n\n  render(){\n \n    return (//here Counter comp will need to render  \n      \n      <React.Fragment>\n        <Navbar count={this.getCounterLength()}/>\n        \n        <main className=\"container\">\n          <Counters \n            headers={this.state.headers}\n            counter={this.state.counter}\n            tables={this.state.tables}\n            cards={this.state.cards}\n            onIncrement={this.incrementHandler}\n            onDelete={this.deleteHandler}\n            onReset={this.resetHandler} />\n        </main>\n        \n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(<App />, rootElement);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}